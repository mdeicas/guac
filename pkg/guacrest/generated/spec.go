// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.1-0.20240123090344-d326c01d279a DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RWTW/cNhD9KwRbIEChRkbaXvYWu0kToB9G1rckhzE1khhLQ3k4srs19N8LUitZkqVm",
	"e/AptxU5H2/evOHsgzaubhwhide7B90AQ42CHL8uobAEYh3tGzThJENv2DbhSO/0VYmqGW2UcZTbouX+",
	"K3espER12yIfdKJt8Bg+CGrUu2WCRHtTYg0RCbsGWSxGJK9zQQ4/5NAERy9sqdBdos8xd4yrV28te5nc",
	"WBIskHXXJcORu/6CRnQXjhh948j3Cc8h+w0E7+EQvowjQYqxoGkqayLm9IsPNDxMUH/PmOud/i59pDXt",
	"b336htlxn+opjR75DlkhGdeSIGOmgBQGl8AroRFLhRIXOc1AQF2DuUHKIgmQfcDbFvtynxftOWSK+2SJ",
	"8q0pFXiVs6uVpTuobKYcq9p6H/BO9NQl+n2ojKDax2L7DM+Od0iq+qzqaJjoy5ar3+3/pGwuy0f9vqfc",
	"fQ3iwnoBwQrW/qshWq70o3yBGQ66F+9taxkzvfu4RDVJ83lV+HO+XqvKelEuV03LlY/Rj+kDurFrcyb+",
	"QO+hWJvDBbjB8CmUJADHgch5+DeUXbTs3fob8A78n/i3XM4BXDtXIdDR4JLxzrrWbxvtBVg2syzKmKZ8",
	"Gn8eLJnA3yh7oaInKsMT9YWDsq6cQHUR3pKNB3BazMR40oRVqEF/K+R04X0PCKmtqkS7Bgkaq3f6p5dn",
	"L890ohuQMhaTAkF18NanGTZIGZI5lllgxBoq78nIghqP1r9OjZPZnvq4zsqjSbpYM12ytsi8Y1GOM+Sg",
	"fYmrzdxAgf4TKfWDepHHV4/M4YX6UV1N7tW9lTJ6lLYo0Yuitr7u4wxFyhDFG8dogLPtKJW7D0H+apD2",
	"+7dq9Oh/faKNZRoK0NPGCrc4XalIbR3aPRYSF+4x+KTdY1c/L5biq7OzLQ2Odun42HSJ/vkUh8ny6hL9",
	"yykua4sk+r46Kd2w2ePT1tY18CEsitAmmx9iD2rnRdm6cSxAomZaDW5piVBJ+c+mcN/F+4sSzY1ep/Hk",
	"nbMybMsVlwVv9BH68a+E9arHuKyzR6ZMgDZx6MuKmjptND+gsMU7fN7RjIPYcjUM5ThQw+BsTEPw+c9p",
	"+LbFPjRvxmnoYOAZRm67ruv+DQAA//9iZPIHJAwAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
